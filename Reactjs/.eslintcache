[{"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/index.js":"1","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/store.js":"2","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Profile.js":"3","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/auth.js":"4","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/auth.service.js":"5","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/Config.js":"6","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/types.js":"7","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/App.js":"8","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Login.js":"9","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/TaskList.js":"10","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/helpers/history.js":"11","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Register.js":"12","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/message.js":"13","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/index.js":"14","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/task.service.js":"15","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/task.js":"16","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/auth-header.js":"17","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reportWebVitals.js":"18","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/message.js":"19","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/auth.js":"20","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/task.js":"21","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/hook/useTimer.js":"22","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/utils/index.js":"23"},{"size":616,"mtime":1614055157000,"results":"24","hashOfConfig":"25"},{"size":357,"mtime":1614055157000,"results":"26","hashOfConfig":"25"},{"size":835,"mtime":1614055157000,"results":"27","hashOfConfig":"25"},{"size":2000,"mtime":1614055157000,"results":"28","hashOfConfig":"25"},{"size":684,"mtime":1614055157000,"results":"29","hashOfConfig":"25"},{"size":146,"mtime":1614055157000,"results":"30","hashOfConfig":"25"},{"size":845,"mtime":1621152651407,"results":"31","hashOfConfig":"25"},{"size":2842,"mtime":1621134582543,"results":"32","hashOfConfig":"25"},{"size":3599,"mtime":1621095091166,"results":"33","hashOfConfig":"25"},{"size":21480,"mtime":1621164282488,"results":"34","hashOfConfig":"25"},{"size":95,"mtime":1614055157000,"results":"35","hashOfConfig":"25"},{"size":5438,"mtime":1621095091182,"results":"36","hashOfConfig":"25"},{"size":373,"mtime":1614055157000,"results":"37","hashOfConfig":"25"},{"size":192,"mtime":1621133470630,"results":"38","hashOfConfig":"25"},{"size":864,"mtime":1621152732861,"results":"39","hashOfConfig":"25"},{"size":4909,"mtime":1621153912777,"results":"40","hashOfConfig":"25"},{"size":389,"mtime":1614055157000,"results":"41","hashOfConfig":"25"},{"size":362,"mtime":1614055157000,"results":"42","hashOfConfig":"25"},{"size":277,"mtime":1614055157000,"results":"43","hashOfConfig":"25"},{"size":1057,"mtime":1614055157000,"results":"44","hashOfConfig":"25"},{"size":1256,"mtime":1621153724929,"results":"45","hashOfConfig":"25"},{"size":1024,"mtime":1621159094609,"results":"46","hashOfConfig":"25"},{"size":312,"mtime":1621157904004,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1nd3sr3",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/index.js",[],["99","100"],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/store.js",[],["101","102"],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Profile.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/auth.js",[],["103","104"],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/auth.service.js",[],["105","106"],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/Config.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/types.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/App.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Login.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/TaskList.js",["107","108","109","110"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\nimport DateTimePicker from 'react-datetime-picker';\nimport Modal from 'react-modal';\nimport Timer from 'react-compound-timer'\n\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nimport { saveTask, getTasks, saveSubTask, getSubTasks, editSubTask } from \"../actions/task\";\n\n/**\n * require validation\n * @param {*} value \n */\nconst required = (value) => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n};\n\nconst TaskList = (props) => {\n    var subtitle;\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const checkBtn = useRef();\n    const checkBtn1 = useRef();\n    const form = useRef();\n    const form1 = useRef();\n    const [name, setName] = useState(\"\");\n    const [dateAndTime, setDateAndTime] = useState(new Date());\n    const [taskName, setTaskName] = useState(\"\");\n    const [isDisplayMessage, setIsDisplayMessage] = useState(false);\n    const [modalIsOpen, setIsOpen] = React.useState(false)\n    const [subTaskName, setSubTaskName] = useState(\"\");\n    const [subTaskDateAndTime, setSubTaskDateAndTime] = useState(new Date());\n    const [subTaskTaskName, setSubTaskTaskName] = useState(\"\");\n    const [taskData, setTaskData] = useState({});\n    const [subTaskData, setSubTaskData] = useState({});\n    const [isEditSubTask, setIsEditSubTask] = useState(false);\n\n    const [loading, setLoading] = useState(false);\n\n    const { message } = useSelector(state => state.message);\n    const { taskList } = useSelector(state => {\n        return state.task\n    });\n\n    const { subTaskList } = useSelector(state => {\n        return state.task\n    });\n\n\n    const dispatch = useDispatch();\n\n\n\n    /**\n     * form submit hendle\n     * @param {*} e \n     */\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        setLoading(true);\n\n        form.current.validateAll();\n\n        if (checkBtn.current.context._errors.length === 0) {\n            let setData = {\n                name,\n                dateAndTime,\n                taskName\n            }\n            //console.log(\"setData ==>\", setData)\n            dispatch(saveTask(setData))\n                .then(() => {\n                    // props.history.push(\"/tasklist\");\n                    // window.location.reload();\n                    setName(\"\")\n                    setDateAndTime(new Date())\n                    setTaskName(\"\")\n                    setLoading(false);\n                    setIsDisplayMessage(true);\n                    dispatch(getTasks())\n                    setTimeout(() => {\n                        setIsDisplayMessage(false);\n                    }, 2000);\n                })\n                .catch(() => {\n                    setLoading(false);\n                });\n        } else {\n            setLoading(false);\n        }\n    };\n\n    const openModal = (task) => {\n        setIsOpen(true);\n        setTaskData(task)\n        setIsEditSubTask(false)\n        setSubTaskName(\"\");\n        setSubTaskDateAndTime(new Date())\n        setSubTaskTaskName(\"\")\n    }\n\n    const openEditModal = (subtask) => {\n        setIsOpen(true);\n        setSubTaskData(subtask)\n        setIsEditSubTask(true)\n        setSubTaskName(subtask.name);\n        setSubTaskDateAndTime(new Date(subtask.dateAndTime))\n        setSubTaskTaskName(subtask.taskName)\n    }\n\n    const afterOpenModal = () => {\n        subtitle.style.color = '#000';\n    }\n\n    const closeModal = () => {\n        setIsOpen(false);\n    }\n\n    const handleSubmitSubTask = (e) => {\n        e.preventDefault();\n        form1.current.validateAll();\n        if (checkBtn1.current.context._errors.length === 0) {\n            if (!isEditSubTask) {\n                let setSubTaskData = {\n                    name: subTaskName,\n                    dateAndTime: subTaskDateAndTime,\n                    taskName: subTaskTaskName,\n                    taskId: taskData.id\n                }\n                dispatch(saveSubTask(setSubTaskData))\n                    .then(() => {\n                        setTaskData({});\n                        closeModal();\n                        setSubTaskName(\"\");\n                        setSubTaskDateAndTime(new Date())\n                        setSubTaskTaskName(\"\")\n                        dispatch(getSubTasks())\n\n                    })\n                    .catch(() => {\n                        setLoading(false);\n                    });\n            } else {\n                let updateSubTaskData = {\n                    name: subTaskName,\n                    dateAndTime: subTaskDateAndTime,\n                    taskName: subTaskTaskName,\n                    taskId: subTaskData.taskId,\n                    id: subTaskData.id,\n                }\n                updateSubTask(updateSubTaskData)\n\n            }\n            //console.log(\"setSubTaskData ==>\", setSubTaskData)\n        } else {\n            //closeModal()\n        }\n    }\n\n    const updateSubTask = (updateSubTaskData) => {\n        dispatch(editSubTask(updateSubTaskData))\n            .then(() => {\n                setTaskData({});\n                closeModal();\n                setSubTaskName(\"\");\n                setSubTaskDateAndTime(new Date())\n                setSubTaskTaskName(\"\")\n                dispatch(getSubTasks())\n\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    }\n\n    const clickOnComplete = (subtask) => {\n        let updateSubTaskData = {\n            isComplete: true,\n            id: subtask.id,\n        }\n        updateSubTask(updateSubTaskData)\n    }\n\n    const clickOnDelete = (subtask) => {\n        let updateSubTaskData = {\n            isDelete: true,\n            id: subtask.id,\n        }\n        updateSubTask(updateSubTaskData)\n    }\n\n\n    /**\n     * get list of tasks\n     */\n    useEffect(() => {\n        if (!taskList) {\n            dispatch(getTasks())\n                .then(() => {\n                    setLoading(false);\n                })\n                .catch(() => {\n                    setLoading(false);\n                });\n        } else {\n            return null\n        }\n    }, [taskList]);\n\n    /**\n     * get list of tasks\n     */\n    useEffect(() => {\n        if (!subTaskList) {\n            dispatch(getSubTasks())\n                .then(() => {\n                    setLoading(false);\n                })\n                .catch(() => {\n                    setLoading(false);\n                });\n        } else {\n            return null\n        }\n    }, [subTaskList]);\n\n    if (!currentUser) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <>\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <Form onSubmit={handleSubmit} ref={form}>\n                        <h3 className=\"text-uppercase\"> Create task</h3>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name </label>\n                            <Input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"name\"\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                                validations={[required]}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dateAndTime\">Date & Time</label>\n                            <DateTimePicker\n                                onChange={setDateAndTime}\n                                value={dateAndTime}\n                                validations={[required]}\n                                className=\"form-control\"\n                                name=\"dateAndTime\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskName\">Task Name</label>\n                            <Input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"taskName\"\n                                value={taskName}\n                                onChange={(e) => setTaskName(e.target.value)}\n                                validations={[required]}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button className=\"btn btn-primary btn-block\" disabled={loading}>\n                                {loading && (\n                                    <span className=\"spinner-border spinner-border-sm\"></span>\n                                )}\n                                <span>Submit</span>\n                            </button>\n                        </div>\n\n                        {isDisplayMessage && message && (\n                            <div className=\"form-group\">\n                                <div className=\"alert alert-danger\" role=\"alert\">\n                                    {message}\n                                </div>\n                            </div>\n                        )}\n                        <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n                    </Form>\n                </div>\n            </div>\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Date & Time</th>\n                        <th scope=\"col\">Task Name</th>\n                        <th scope=\"col\">Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {taskList && taskList.map((task, index) => {\n                        return (\n                            <>\n                                <tr>\n                                    <th scope=\"row\">{index + 1}</th>\n                                    <td>{task.name}</td>\n                                    <td>{task.dateAndTime}</td>\n                                    <td>{task.taskName}</td>\n                                    <td>\n                                        <button className=\"btn btn-primary btn-block\" onClick={() => openModal(task)}>\n                                            Create Sub Task\n                                        </button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th scope=\"row\"></th>\n                                    <td colspan=\"4\">\n                                        <tr>\n                                            <th scope=\"col\">#</th>\n                                            <th scope=\"col\">Name</th>\n                                            <th scope=\"col\">Date & Time</th>\n                                            <th scope=\"col\">Task Name</th>\n                                            <th scope=\"col\">Timer</th>\n                                            <th scope=\"col\">Action</th>\n                                        </tr>\n                                        {subTaskList && subTaskList.map((subtask, jindex) => {\n                                            console.log(\"subtask ==>\", subtask);\n                                            if (subtask.taskId === task.id) {\n                                                return (\n                                                    <tr style={subtask.isDelete ? { backgroundColor: 'red' } : subtask.isComplete ? { backgroundColor: 'green' } : {}}>\n                                                        <th scope=\"row\">###</th>\n                                                        <td>{subtask.name}</td>\n                                                        <td>{subtask.dateAndTime}</td>\n                                                        <td>{subtask.taskName}</td>\n                                                        <td>\n                                                            <Timer\n                                                                initialTime={0}\n                                                                startImmediately={false}\n                                                                onStart={() => console.log('onStart hook')}\n                                                                onResume={() => console.log('onResume hook')}\n                                                                onPause={() => console.log('onPause hook')}\n                                                                onStop={() => console.log('onStop hook')}\n                                                                onReset={() => console.log('onReset hook')}\n                                                            >\n                                                                {({ start, resume, pause, stop, reset, getTimerState, getTime }) => (\n                                                                    <React.Fragment>\n                                                                        <div>\n                                                                            <Timer.Days /> d:\n                                                                            <Timer.Hours /> h:\n                                                                            <Timer.Minutes /> m:\n                                                                            <Timer.Seconds /> s\n                                                                        </div>\n                                                                        <div>\n                                                                            <button className=\"btn btn-primary btn-block\" onClick={start}>Start</button>\n                                                                            {/* <button onClick={pause}>Pause</button>\n                                                                            <button onClick={resume}>Resume</button> */}\n                                                                            <button className=\"btn btn-primary btn-block\" onClick={stop}>Stop</button>\n                                                                            {/* <button onClick={reset}>Reset</button> */}\n                                                                        </div>\n                                                                    </React.Fragment>\n                                                                )}\n                                                            </Timer>\n                                                        </td>\n                                                        <td>\n                                                            <button className=\"btn btn-primary btn-block\" onClick={() => clickOnComplete(subtask)}>\n                                                                Complete\n                                                            </button>\n                                                            <button className=\"btn btn-primary btn-block\" onClick={() => openEditModal(subtask)}>\n                                                                Edit\n                                                            </button>\n                                                            <button className=\"btn btn-primary btn-block\" onClick={() => clickOnComplete(subtask)}>\n                                                                Delete\n                                                            </button>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            } else {\n                                                return\n                                            }\n                                        })}\n                                    </td>\n                                </tr>\n                            </>\n                        )\n                    })}\n                    {/* <tr>\n                        <th scope=\"row\">1</th>\n                        <td>Mark</td>\n                        <td>Otto</td>\n                        <td>@mdo</td>\n                    </tr>\n                    <tr>\n                        <th scope=\"row\">2</th>\n                        <td>Jacob</td>\n                        <td>Thornton</td>\n                        <td>@fat</td>\n                    </tr>\n                    <tr>\n                        <th scope=\"row\">3</th>\n                        <td colspan=\"2\">Larry the Bird</td>\n                        <td>@twitter</td>\n                    </tr> */}\n                </tbody>\n            </table>\n            <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n                style={customStyles}\n                contentLabel=\"Example Modal\"\n            >\n\n                {/* <h2 ref={_subtitle => (subtitle = _subtitle)}>Create SubTask</h2>\n                <button onClick={closeModal}>close</button>\n                <div>I am a modal</div> */}\n                <div className=\"modal-content\">\n                    <Form onSubmit={handleSubmitSubTask} ref={form1}>\n                        <div className=\"modal-header\">\n                            {!isEditSubTask &&\n                                <h5 className=\"modal-title text-uppercase\" ref={_subtitle => (subtitle = _subtitle)}>Create {taskData.taskName} 's sub task</h5>\n                            }\n                            {isEditSubTask &&\n                                <h5 className=\"modal-title text-uppercase\" ref={_subtitle => (subtitle = _subtitle)}>Edit {subTaskData.taskName}</h5>\n                            }\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={closeModal}>\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <div className=\"form-group\">\n                                <label htmlFor=\"subTaskName\">Name </label>\n                                <Input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"subTaskName\"\n                                    value={subTaskName}\n                                    onChange={(e) => setSubTaskName(e.target.value)}\n                                    validations={[required]}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Date & Time</label>\n                                <DateTimePicker\n                                    onChange={setSubTaskDateAndTime}\n                                    value={subTaskDateAndTime}\n                                    validations={[required]}\n                                    className=\"form-control\"\n                                    name=\"dateAndTime\"\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"subTaskTaskName\">Task Name </label>\n                                <Input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"subTaskTaskName\"\n                                    value={subTaskTaskName}\n                                    onChange={(e) => setSubTaskTaskName(e.target.value)}\n                                    validations={[required]}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={closeModal}>Close</button>\n                            {!isEditSubTask &&\n                                <button type=\"submit\" className=\"btn btn-primary\">Save changes</button>\n                            }\n                            {isEditSubTask &&\n                                <button type=\"submit\" className=\"btn btn-primary\">Edit changes</button>\n                            }\n                        </div>\n                        <CheckButton style={{ display: \"none\" }} ref={checkBtn1} />\n                    </Form>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default TaskList;","/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/helpers/history.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/components/Register.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/message.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/index.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/task.service.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/task.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/services/auth-header.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reportWebVitals.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/actions/message.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/auth.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/reducers/task.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/hook/useTimer.js",[],"/home/acquaint/projects/RahulDemo/tracking-web-page/Reactjs/src/utils/index.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"115"},{"ruleId":"113","replacedBy":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":205,"column":11,"nodeType":"123","messageId":"124","endLine":205,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":229,"column":8,"nodeType":"127","endLine":229,"endColumn":18,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"126","line":246,"column":8,"nodeType":"127","endLine":246,"endColumn":21,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":401,"column":49,"nodeType":"132","messageId":"133","endLine":401,"endColumn":55},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],["134"],["135"],["134"],["135"],["134"],["135"],"no-unused-vars","'clickOnDelete' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["136"],["137"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [dispatch, taskList]",{"range":"142","text":"143"},"Update the dependencies array to be: [dispatch, subTaskList]",{"range":"144","text":"145"},[6616,6626],"[dispatch, taskList]",[6993,7006],"[dispatch, subTaskList]"]